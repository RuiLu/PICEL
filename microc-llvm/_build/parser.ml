type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | DPLUS
  | DMIN
  | DTIMES
  | CONV
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | BREAK
  | CONTINUE
  | IMPORT
  | MAIN
  | SIZEOF
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | CHAR
  | BOOL
  | VOID
  | DELETE
  | PIC
  | LITERAL of (int)
  | ID of (string)
  | CHARLIT of (char)
  | STRINGLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 57 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* DPLUS *);
  272 (* DMIN *);
  273 (* DTIMES *);
  274 (* CONV *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* TRUE *);
  282 (* FALSE *);
  283 (* AND *);
  284 (* OR *);
  285 (* RETURN *);
  286 (* BREAK *);
  287 (* CONTINUE *);
  288 (* IMPORT *);
  289 (* MAIN *);
  290 (* SIZEOF *);
  291 (* IF *);
  292 (* ELSE *);
  293 (* FOR *);
  294 (* WHILE *);
  295 (* INT *);
  296 (* CHAR *);
  297 (* BOOL *);
  298 (* VOID *);
  299 (* DELETE *);
  300 (* PIC *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  301 (* LITERAL *);
  302 (* ID *);
  303 (* CHARLIT *);
  304 (* STRINGLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\007\000\007\000\003\000\008\000\
\008\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\000\000\002\000\003\000\000\000\
\002\000\002\000\002\000\003\000\003\000\005\000\007\000\009\000\
\005\000\000\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\053\000\000\000\010\000\011\000\012\000\001\000\
\003\000\004\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\013\000\000\000\000\000\009\000\
\014\000\000\000\000\000\000\000\000\000\016\000\005\000\000\000\
\000\000\029\000\030\000\000\000\000\000\000\000\000\000\028\000\
\000\000\017\000\000\000\000\000\000\000\044\000\045\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\021\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\023\000\000\000\000\000\
\024\000"

let yydgoto = "\002\000\
\003\000\004\000\009\000\010\000\011\000\016\000\023\000\027\000\
\017\000\042\000\043\000\073\000\076\000\077\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\254\068\255\000\000\153\255\226\254\015\255\
\014\255\000\000\022\255\153\255\000\000\253\254\153\255\000\000\
\000\000\255\254\042\255\053\255\048\255\000\000\000\000\048\255\
\048\255\000\000\000\000\039\255\057\255\059\255\074\255\000\000\
\000\255\000\000\214\255\161\000\087\255\000\000\000\000\000\000\
\238\255\048\255\048\255\048\255\048\255\048\255\000\000\048\255\
\048\255\048\255\048\255\048\255\048\255\048\255\048\255\048\255\
\048\255\048\255\048\255\000\000\000\000\000\000\183\000\225\000\
\081\255\205\000\225\000\093\255\084\255\225\000\098\255\098\255\
\000\000\000\000\148\255\148\255\234\255\234\255\234\255\234\255\
\008\001\245\000\152\255\048\255\152\255\000\000\048\255\066\255\
\006\000\000\000\225\000\152\255\048\255\000\000\111\255\152\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\255\000\000\000\000\
\116\255\000\000\000\000\000\000\000\000\000\000\101\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\190\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\255\000\000\118\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\255\
\000\000\000\000\072\255\000\000\125\255\054\255\035\000\063\000\
\000\000\000\000\080\255\202\255\073\000\101\000\111\000\139\000\
\117\255\011\255\000\000\000\000\000\000\000\000\000\000\138\255\
\000\000\000\000\092\255\000\000\126\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\108\000\000\000\028\000\000\000\000\000\104\000\
\000\000\171\255\227\255\034\000\000\000\000\000"

let yytablesize = 544
let yytable = "\044\000\
\008\000\053\000\046\000\047\000\001\000\096\000\049\000\098\000\
\027\000\012\000\027\000\043\000\054\000\043\000\102\000\018\000\
\043\000\019\000\105\000\020\000\071\000\072\000\074\000\075\000\
\078\000\021\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\043\000\048\000\
\029\000\015\000\024\000\029\000\028\000\030\000\031\000\022\000\
\032\000\029\000\026\000\032\000\033\000\013\000\046\000\033\000\
\046\000\032\000\050\000\046\000\051\000\033\000\097\000\034\000\
\035\000\099\000\034\000\035\000\013\000\014\000\036\000\072\000\
\034\000\035\000\051\000\052\000\037\000\051\000\038\000\039\000\
\036\000\092\000\036\000\040\000\041\000\036\000\040\000\041\000\
\029\000\095\000\030\000\069\000\040\000\041\000\052\000\094\000\
\032\000\052\000\036\000\036\000\033\000\100\000\016\000\026\000\
\016\000\016\000\036\000\036\000\058\000\059\000\016\000\034\000\
\035\000\104\000\016\000\036\000\006\000\042\000\007\000\042\000\
\049\000\037\000\042\000\038\000\039\000\016\000\016\000\050\000\
\026\000\016\000\025\000\040\000\041\000\045\000\103\000\016\000\
\000\000\016\000\016\000\022\000\000\000\022\000\022\000\042\000\
\042\000\016\000\016\000\022\000\000\000\000\000\000\000\022\000\
\000\000\029\000\000\000\030\000\056\000\057\000\058\000\059\000\
\000\000\032\000\022\000\022\000\000\000\033\000\022\000\000\000\
\062\000\063\000\064\000\065\000\022\000\000\000\022\000\022\000\
\034\000\035\000\000\000\000\000\036\000\000\000\022\000\022\000\
\000\000\000\000\037\000\000\000\038\000\039\000\031\000\005\000\
\031\000\006\000\007\000\031\000\040\000\041\000\031\000\031\000\
\031\000\031\000\037\000\000\000\037\000\000\000\000\000\037\000\
\031\000\031\000\031\000\031\000\031\000\031\000\055\000\000\000\
\031\000\031\000\000\000\000\000\037\000\037\000\056\000\057\000\
\058\000\059\000\000\000\000\000\037\000\037\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\065\000\070\000\000\000\
\066\000\067\000\056\000\057\000\058\000\059\000\056\000\057\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\065\000\101\000\000\000\
\066\000\067\000\000\000\000\000\000\000\000\000\056\000\057\000\
\058\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\065\000\000\000\000\000\
\066\000\067\000\000\000\032\000\000\000\032\000\000\000\005\000\
\032\000\006\000\007\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
\032\000\032\000\032\000\000\000\000\000\032\000\032\000\033\000\
\000\000\033\000\000\000\000\000\033\000\000\000\000\000\033\000\
\033\000\038\000\000\000\038\000\000\000\000\000\038\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\039\000\000\000\039\000\
\000\000\000\000\039\000\000\000\000\000\000\000\000\000\040\000\
\000\000\040\000\000\000\000\000\040\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\041\000\000\000\041\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\068\000\000\000\041\000\041\000\000\000\
\000\000\056\000\057\000\058\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\091\000\000\000\066\000\067\000\000\000\000\000\056\000\
\057\000\058\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\061\000\062\000\063\000\064\000\065\000\093\000\
\000\000\066\000\067\000\000\000\000\000\056\000\057\000\058\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\000\000\000\000\066\000\
\067\000\056\000\057\000\058\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\000\000\000\000\066\000\067\000\056\000\057\000\058\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\000\000\000\000\066\000\
\056\000\057\000\058\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\061\000\062\000\063\000\064\000\065\000"

let yycheck = "\029\000\
\000\000\002\001\032\000\033\000\001\000\091\000\036\000\093\000\
\001\001\046\001\003\001\001\001\013\001\003\001\100\000\046\001\
\006\001\003\001\104\000\006\001\050\000\051\000\052\000\053\000\
\054\000\004\001\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\028\001\001\001\
\002\001\014\000\046\001\002\001\046\001\004\001\005\001\020\000\
\010\001\002\001\023\000\010\001\014\001\001\001\001\001\014\001\
\003\001\010\001\002\001\006\001\002\001\014\001\092\000\025\001\
\026\001\095\000\025\001\026\001\001\001\002\001\029\001\101\000\
\025\001\026\001\003\001\002\001\035\001\006\001\037\001\038\001\
\001\001\001\001\003\001\045\001\046\001\006\001\045\001\046\001\
\002\001\006\001\004\001\005\001\045\001\046\001\003\001\003\001\
\010\001\006\001\019\001\020\001\014\001\036\001\002\001\001\001\
\004\001\005\001\027\001\028\001\011\001\012\001\010\001\025\001\
\026\001\003\001\014\001\029\001\003\001\001\001\003\001\003\001\
\003\001\035\001\006\001\037\001\038\001\025\001\026\001\003\001\
\003\001\029\001\023\000\045\001\046\001\030\000\101\000\035\001\
\255\255\037\001\038\001\002\001\255\255\004\001\005\001\027\001\
\028\001\045\001\046\001\010\001\255\255\255\255\255\255\014\001\
\255\255\002\001\255\255\004\001\009\001\010\001\011\001\012\001\
\255\255\010\001\025\001\026\001\255\255\014\001\029\001\255\255\
\021\001\022\001\023\001\024\001\035\001\255\255\037\001\038\001\
\025\001\026\001\255\255\255\255\029\001\255\255\045\001\046\001\
\255\255\255\255\035\001\255\255\037\001\038\001\001\001\039\001\
\003\001\041\001\042\001\006\001\045\001\046\001\009\001\010\001\
\011\001\012\001\001\001\255\255\003\001\255\255\255\255\006\001\
\019\001\020\001\021\001\022\001\023\001\024\001\001\001\255\255\
\027\001\028\001\255\255\255\255\019\001\020\001\009\001\010\001\
\011\001\012\001\255\255\255\255\027\001\028\001\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\001\001\255\255\
\027\001\028\001\009\001\010\001\011\001\012\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\001\001\255\255\
\027\001\028\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\255\255\001\001\255\255\003\001\255\255\039\001\
\006\001\041\001\042\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\003\001\255\255\027\001\028\001\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\003\001\255\255\027\001\028\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\255\255\027\001\028\001\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\022\001\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  DPLUS\000\
  DMIN\000\
  DTIMES\000\
  CONV\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  BREAK\000\
  CONTINUE\000\
  IMPORT\000\
  MAIN\000\
  SIZEOF\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  CHAR\000\
  BOOL\000\
  VOID\000\
  DELETE\000\
  PIC\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  CHARLIT\000\
  STRINGLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 32 "parser.mly"
            ( _1 )
# 390 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                 ( [], [] )
# 396 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 36 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 404 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 37 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 412 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 41 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 427 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
                  ( [] )
# 433 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 49 "parser.mly"
                  ( List.rev _1 )
# 440 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                             ( [(_1,_2)] )
# 448 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                             ( (_3,_4) :: _1 )
# 457 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
        ( Int )
# 463 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
         ( Bool )
# 469 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
         ( Void )
# 475 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                     ( [] )
# 481 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 62 "parser.mly"
                     ( _2 :: _1 )
# 489 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 65 "parser.mly"
               ( (_1, _2) )
# 497 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                   ( [] )
# 503 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 69 "parser.mly"
                   ( _2 :: _1 )
# 511 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
              ( Expr _1 )
# 518 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                ( Return Noexpr )
# 524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                     ( Return _2 )
# 531 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 75 "parser.mly"
                            ( Block(List.rev _2) )
# 538 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 76 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 546 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 77 "parser.mly"
                                            ( If(_3, _5, _7) )
# 555 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 565 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                                  ( While(_3, _5) )
# 573 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                  ( Noexpr )
# 579 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                  ( _1 )
# 586 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 87 "parser.mly"
                     ( Literal(_1) )
# 593 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                     ( BoolLit(true) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                     ( BoolLit(false) )
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                     ( Id(_1) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 628 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 636 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 644 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 652 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 668 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 692 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 708 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                         ( Unop(Neg, _2) )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Unop(Not, _2) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Assign(_1, _3) )
# 730 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 106 "parser.mly"
                                 ( Call(_1, _3) )
# 738 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                       ( _2 )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                  ( [] )
# 751 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 111 "parser.mly"
                  ( List.rev _1 )
# 758 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                            ( [_1] )
# 765 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                            ( _3 :: _1 )
# 773 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
