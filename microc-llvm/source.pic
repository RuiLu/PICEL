void copy_pic(pic src, pic dst)
{
  /*pic dst=newpic(src.w,src.h);*/
  int i;
  int j;
  for(i=0;i<src.h;i++)
  {
    for(j=0;j<src.w;j++)
    {
      dst.r[i][j]=src.r[i][j];
      dst.g[i][j]=src.g[i][j];
      dst.b[i][j]=src.b[i][j];
    }
  }
  return;
}


int bound(int input){
  if(input < 0){
    return 0;
  } 
  else
  if(input>255)
  {
    return 255;
  }
  else{
    return input;
  }
}


pic convolution(pic a, mat kernel)
{
/*
unable to verify whether kernel is a 5*5 matrix 
*/


pic temp=newpic(a.h,a.w);

int size=5;
int s1=size/2;
int r=0;
    int g=0;
    int b=0;
int tempr;
    int tempg;
    int tempb; 
 int i1;
     int j1;   
int i;
int j;
int x;
int y;

int tot=0;
for(i=0;i<size;i++)
{
  for(j=0;j<size;j++)
  {
    tot=tot+kernel[i][j];
  }
}

if(tot==0)
  tot=1;


for(i=0;i<a.h;i++)
{
  for(j=0;j<a.w;j++)
  {
    tempr=tempg=tempb=0;
    for(x=0;x<size;x++)
    {
	for(y=0;y<size;y++)
        {
	 i1=i+x-s1;
	 j1=j+y-s1;
	  if((i1<0) or (i1>=a.w) or (j1<0) or (j1>=a.h))
	  {
	    r=a.r[i][j]; 
	    g=a.g[i][j];
	    b=a.b[i][j];
	  }else
	  {
	    r=a.r[i1][j1]; 
	    g=a.g[i1][j1];
	    b=a.b[i1][j1];
	  }


	  tempr=tempr+r*kernel[x][y];
	  tempg=tempg+g*kernel[x][y];
	  tempb=tempb+b*kernel[x][y];
        }
    }
      temp.r[i][j] = bound(tempr / tot);
      temp.g[i][j] = bound(tempg / tot);
      temp.b[i][j] = bound(tempb / tot);

  }
}


for(i=0;i<a.h;i++)
{
  for(j=0;j<a.w;j++)
  {
    a.r[i][j]=temp.r[i][j];
    a.g[i][j]=temp.g[i][j];
    a.b[i][j]=temp.b[i][j];
  }
}


delete temp;
return a;
}
int main(){
	pic a;
	a = load("./test/lena.bmp");
	mat kernel1[5][5];
	mat kernel2[5][5];
	kernel1 = { 0,0,0,0,0,
		    0,-1,-1,-1,0,
	   	    0,-1,8,-1,0,
		    0,-1,-1,-1,0,
		    0,0,0,0,0};
	kernel2 = { 0,0,0,0,0,
		    0,0,-1,0,0,
		    0,-1,5,-1,0,
		    0,0,-1,0,0,
		    0,0,0,0,0};
	a # kernel2 # kernel1;
	save_file("test-conv3.bmp",a);
	return 0;
}
