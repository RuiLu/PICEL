/*pic copy_pic(pic a)
{
  pic temp=newpic(a.w,a.h);
  int i;
  int j;
  for(i=0;i<a.w;i++)
  {
    for(j=0;j<a.h;j++)
    {
      temp.r[i][j]=a.r[i][j];
      temp.g[i][j]=a.g[i][j];
      temp.b[i][j]=a.b[i][j];
    }
  }
  return temp;

}
*/

int bound(int input){
  if(input < 0){
    return 0;
  } 
  else{
    return input;
  }
}


int convolution(pic a, mat kernel)
{
/*
unable to verify whether kernel is a 5*5 matrix 
*/


pic temp=newpic(a.w,a.h);

int size=5;
int s1=size/2;
int r=0;
    int g=0;
    int b=0;
int tempr;
    int tempg;
    int tempb; 
 int i1;
     int j1;   
int i;
int j;
int x;
int y;

int tot=0;
for(i=0;i<size;i++)
{
  for(j=0;j<size;j++)
  {
    tot=tot+kernel[i][j];
  }
}

if(tot==0)
  tot=1;


for(i=0;i<a.w;i++)
{
  for(j=0;j<a.h;j++)
  {
    tempr=tempg=tempb=0;
    for(x=0;x<size;x++)
    {
	for(y=0;y<size;y++)
        {
	 i1=i+x-s1;
	 j1=j+y-s1;
	  if((i1<0) or (i1>=a.w) or (j1<0) or (j1>=a.h))
	  {
	    r=a.r[i][j]; 
	    g=a.g[i][j];
	    b=a.b[i][j];
	  }else
	  {
	    r=a.r[i1][j1]; 
	    g=a.g[i1][j1];
	    b=a.b[i1][j1];
	  }


	  tempr=tempr+r*kernel[x][y];
	  tempg=tempg+g*kernel[x][y];
	  tempb=tempb+b*kernel[x][y];
        }
    }
      temp.r[i][j] = bound(tempr / tot);
      temp.g[i][j] = bound(tempg / tot);
      temp.b[i][j] = bound(tempb / tot);

  }
}


for(i=0;i<a.w;i++)
{
  for(j=0;j<a.h;j++)
  {
    a.r[i][j]=temp.r[i][j];
    a.g[i][j]=temp.g[i][j];
    a.b[i][j]=temp.b[i][j];
  }
}

/*
delete(temp);
*/
}
